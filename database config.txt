Database Configuration Summary

Schema: users

    Table: profiles => Stores general profile information of the user.

    Columns:

        id (UUID, auth.uid()): User ID, linked to Supabase authentication.
        username (text): Username.
        email (text): User email.
        avatar_url (text): User avatar URL.
        country (text): User country.
        city (text): User city.
        firstname (text): User first name.
        lastname (text): User last name.
        gender (text): User gender.
        birthdate (date): User birthdate.
        bio (text): User biography.
        content_search (tsvector): Full-text search vector with basic fields.
        content_search_roles (tsvector): Full-text search vector for roles.
        content_search_details (tsvector): Full-text search vector for role details (hashtags).
        content_search_all (tsvector): Consolidated search vector combining all the above.

    Triggers:

        prevent_duplicate_usernames: Ensures usernames are unique across all profiles.
        trigger_update_profile_content_search: Updates `content_search` on INSERT/UPDATE.
        trigger_update_content_search_roles: Updates `content_search_roles` on INSERT/UPDATE of music.roles.
        trigger_update_content_search_details: Updates `content_search_details` based on profile_hashtags.
        trigger_update_profile_content_search_all: Updates `content_search_all` from all other vectors.

    ------------   *   ------------

    Table: profile_groups => Stores general information about profile groups (e.g., a band).

    Columns:

        id (UUID): Unique identifier for the profile group.
        name (text): Name of the group (e.g., band name).
        bio (text, nullable): Brief biography or description of the group.
        avatar_url (text, nullable): URL of the group's avatar or representative image.
        country (text, nullable): Country where the group is based.
        city (text, nullable): City where the group is based.
        genre (text, nullable): Primary genre of the group.
        created_by (UUID, references users.profiles.id): ID of the profile that created the group.
        created_at (timestamp, default now()): Timestamp indicating when the group was created.

    Triggers:

        add_creator_to_group_members: Automatically adds the creator to profile_group_members with role "admin".

    ------------   *   ------------

    Table: profile_group_members => Associates individual profiles with profile groups, including role and join date.

    Columns:

        id (UUID): Unique identifier for the record.
        profile_group_id (UUID, references users.profile_groups.id): ID of the profile group.
        profile_id (UUID, references users.profiles.id): ID of the profile that is a member of the group.
        role (text, default 'member'): Role of the profile within the group (e.g., "admin", "member").
        joined_at (timestamp, default now()): Timestamp indicating when the profile joined the group.

    Triggers:

        trigger_reassign_admin: Reassigns a new admin if the only existing admin leaves.
        trigger_group_member_join: Creates a notification when a member joins.
        trigger_group_member_leave: Creates a notification when a member leaves.

------------   *   ------------

Schema: music

    Table: roles => Stores user roles (instrumentalist, singer, DJ, producer, composer).

    Columns:

        id (UUID): Role ID.
        role (text): Role name.
        profile_id (UUID): Linked to the profiles table.

    Triggers:

        trigger_update_profile_content_search_roles: Updates `content_search_roles` on insert or update.

    Table: instrument_details => Stores specific details of an instrumentalist.

    Columns:

        id (UUID)
        profile_id (UUID)
        role_id (UUID)
        instrument (text)
        years_of_experience (int2)
        level (text)

    Table: singer_details => Stores specific details of a singer.

    Columns:

        id (UUID)
        role_id (UUID)
        voice_type (text)
        music_genre (text)
        level (text)
        profile_id (UUID)

    Table: dj_details => Stores specific details of a DJ.

    Columns:

        id (UUID)
        role_id (UUID)
        preferred_genres (text)
        events_played (text)
        level (text)
        profile_id (UUID)

    Table: producer_details => Stores specific details of a producer.

    Columns:

        id (UUID)
        role_id (UUID)
        production_type (text)
        years_of_experience (int2)
        level (text)
        profile_id (UUID)

    Table: composer_details => Stores specific details of a composer.

    Columns:

        id (UUID)
        role_id (UUID)
        composition_style (text)
        years_of_experience (int, nullable)
        level (text)
        profile_id (UUID)

------------   *   ------------

Schema: social

    Table: profile_hashtags => Associates user profiles with hashtags (used for content_search_details).

    Columns:

        profile_id (UUID, references users.profiles.id)
        hashtag_id (UUID, references social.hashtags.id)
        created_at (timestamp)

    Triggers:

        trigger_update_profile_content_search_details: Updates `content_search_details` based on associated hashtags.

    Table: hashtags => Stores unique hashtags.

    Columns:

        id (UUID)
        name (text)

    Table: user_connections => Stores user connections (friendships, followers).

    Columns:

        id (UUID)
        follower_profile_id (UUID)
        following_profile_id (UUID)
        status (text)
        updated_at (timestamp)

    Triggers:

        trigger_follow_request: Creates a notification when a follow request is sent.
        trigger_update_connection_timestamp: Updates `updated_at` when status changes.

    Table: posts => Stores user posts.

    Columns:

        id (UUID)
        profile_id (UUID)
        title (text)
        content (text)
        images_urls (text)
        created_at (timestamp)
        updated_at (timestamp)
        content_search (tsvector)

    Triggers:

        trigger_update_posts_timestamp: Updates `updated_at` when a post is edited.
        trigger_like: Creates a notification when a post is liked.
        update_content_search_trigger: Calls `refresh_post_content_search()` to update `content_search`.

    Table: comments => Stores comments on posts.

    Columns:

        id (UUID)
        post_id (UUID)
        profile_id (UUID)
        content (text)
        updated_at (timestamp)

    Triggers:

        trigger_update_comments_timestamp: Updates `updated_at` when edited.
        trigger_comment: Creates a notification when a comment is added.

    Table: likes => Stores likes on posts and comments.

    Columns:

        id (UUID)
        profile_id (UUID)
        post_id (UUID)
        comment_id (UUID)
        updated_at (timestamp)

    Triggers:

        prevent_duplicate_likes: Ensures uniqueness on likes per user per post/comment.

    Table: conversations => Stores chat conversations.

    Columns:

        id (UUID)
        created_at (timestamp)
        updated_at (timestamp)
        avatar_url (text)
        title (text)
        is_group (boolean)
        created_by (UUID)

    Table: conversation_participants => Participants of conversations.

    Columns:

        conversation_id (UUID)
        profile_id (UUID)
        joined_at (timestamp)
        role (text)

    Table: messages => Chat messages within conversations.

    Columns:

        id (UUID)
        created_at (timestamp)
        conversation_id (UUID)
        sender_profile_id (UUID)
        content (text)
        updated_at (timestamp)
        deleted_at (timestamp)
        delivered_to (UUID[])
        read_by (UUID[])

    Triggers:

        trigger_message: Creates a notification when sent.
        trigger_update_message_timestamp: Updates `updated_at` when edited.
        trigger_soft_delete_message: Implements soft delete.

    Table: notifications => Stores system/user notifications.

    Columns:

        id (UUID)
        created_at (timestamp)
        profile_id (UUID)
        type (text)
        entity_id (UUID)
        from_user_id (UUID)
        is_read (boolean)
        message (text)
