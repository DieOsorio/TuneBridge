Database Configuration Summary

    Schema: users

        Table: profiles => Stores general profile information of the user.

        Columns:

            id (UUID, auth.uid()): User ID, linked to Supabase authentication.

            username (text): Username.

            email (text): User email.

            avatar_url (text): User avatar URL.

            country (text): User country.

            city (text): User city.

            firstname (text): User first name.

            lastname (text): User last name.

            gender (text): User gender.

            birthdate (date): User birthdate.

            bio (text): User biography.

        Triggers:

            prevent_duplicate_usernames: Ensures usernames are unique across all profiles.
            trigger_update_profile_content_search: Generates a full-text search vector (tsvector) by combining Spanish and English versions of relevant fields such as username, firstname, lastname, email, country, city, and bio, enabling efficient text-based search on user profiles.

        ------------   *   ------------

        Table: profile_groups => Stores general information about profile groups (e.g., a band).
        
        Columns:

            id (UUID): Unique identifier for the profile group.

            name (text): Name of the group (e.g., band name).

            bio (text, nullable): Brief biography or description of the group.

            avatar_url (text, nullable): URL of the group's avatar or representative image.

            country (text, nullable): Country where the group is based.

            city (text, nullable): City where the group is based.

            genre (text, nullable): Primary genre of the group.

            created_by (UUID, references users.profiles.id): ID of the profile that created the group.

            created_at (timestamp, default now()): Timestamp indicating when the group was created.

        Triggers:

            prevent_duplicate_usernames: Ensures usernames are unique across all profiles.

            add_creator_to_group_members: Automatically adds the creator of the group as the first member in the profile_group_members table with the role "admin".

        ------------   *   ------------

        Table: profile_group_members => Associates individual profiles with profile groups, including role and join date.
        
        Columns:

            id (UUID): Unique identifier for the record.

            profile_group_id (UUID, references users.profile_groups.id): ID of the profile group.

            profile_id (UUID, references users.profiles.id): ID of the profile that is a member of the group.

            role (text, default 'member'): Role of the profile within the group (e.g., "admin", "member").

            joined_at (timestamp, default now()): Timestamp indicating when the profile joined the group.

        Triggers:

            trigger_reassign_admin: Automatically assigns a new admin when the only existing admin leaves a group.
            trigger_group_member_join: Trigger function to create a notification when a new member joins a group.
            trigger_group_member_leave: Trigger function to create a notification when a member leaves a group.

    ------------   *   ------------

    Schema: music

        Table: roles => Stores user roles (instrumentalist, singer, DJ, producer, composer).

        Columns:

            id (UUID): Role ID.

            role (text): Role name.

            profile_id (UUID): Linked to the profiles table. (ON DELETE CASCADE, ON UPDATE CASCADE)
        
    ------------   /   ------------

        Table: instrumentist_details => Stores specific details of an instrumentalist.

        Columns:

            id (UUID): Detail ID.

            role_id (UUID): Linked to the roles table.

            instruments (text array): List of instruments played by the user.

            years_of_experience (int, nullable): Years of experience.

            level (int, nullable): User's skill level.
        
    ------------   /   ------------

        Table: singer_details => Stores specific details of a singer.

        Columns:

            id (UUID)

            role_id (UUID)

            voice_type (text)

            music_genre (text)

            level (text)

    ------------   /   ------------

        Table: dj_details => Stores specific details of a DJ.

        Columns:

            id (UUID)

            role_id (UUID)

            preferred_genres (text)

            events_played (text, nullable)

            level (text)

            profile_id (UUID, ON DELETE/UPDATE CASCADE)

    ------------   /   ------------

        Table: producer_details => Stores specific details of a producer.

        Columns:

            id (UUID)

            role_id (UUID)

            production_type (text)

            years_of_experience (int, nullable)

            level (text)

            profile_id (UUID, ON DELETE/UPDATE CASCADE)

    ------------   /   ------------

        Table: composer_details => Stores specific details of a composer.

        Columns:

            id (UUID)

            role_id (UUID)

            composition_style (text)

            years_of_experience (int, nullable)

            level (text)

            profile_id (UUID, ON DELETE/UPDATE CASCADE)

    ------------   *   ------------

    Schema: social

        Table: user_connections => Stores user connections (friendships, followers).

        Columns:

            id (UUID)

            follower_profile_id (UUID, ref to users.profiles)

            following_profile_id (UUID, ref to users.profiles)

            status (text, UNIQUE)

            updated_at (timestamp)

        Triggers:            

            trigger_follow_request: Creates a notification when a follow request is sent.

            trigger_update_connection_timestamp: Automatically updates the `updated_at` column when the connection status changes.

    ------------   /   ------------

        Table: posts => Stores user posts.

        Columns:

            id (UUID): Unique identifier of the post.

            profile_id (UUID, ref to users.profiles): Author of the post.

            title (text): Title of the post.

            content (text): Main content of the post.

            images_urls (text, optional): URLs of images associated with the post (as comma-separated text or array depending on implementation).

            created_at (timestamp): Timestamp when the post was created.

            updated_at (timestamp): Timestamp of the last edit of the post.

            content_search (tsvector): Searchable vector generated from title and content.

        Indexes:
            content_search_idx: GIN index on content_search for full-text search performance.

        Triggers:

            trigger_update_posts_timestamp: Automatically updates `updated_at` when a post is edited.

            trigger_like: Creates a notification when a post is liked.

            update_content_search_trigger: Updates `content_search` using `refresh_post_content_search()` when a post is inserted or updated.


    ------------   /   ------------

        Table: comments => Stores comments on posts.

        Columns:

            id (UUID)

            post_id (UUID, ref to posts.id)

            profile_id (UUID, ref to users.profiles.id)

            content (text, not nullable)

            updated_at (timestamp)

        Triggers:

            trigger_update_comments_timestamp: Automatically updates `updated_at` when a comment is edited.

            trigger_comment: Creates a notification when a comment is added to a post.

    ------------   /   ------------

        Table: likes => Stores likes on posts and comments.

        Columns:

            id (UUID)

            profile_id (UUID, ref to users.profiles.id)

            post_id (UUID, ref to posts.id, optional)

            comment_id (UUID, ref to comments.id, optional)

            updated_at (timestamp)

        Triggers:

            prevent_duplicate_likes: Ensures a user cannot like the same post or comment more than once.

    ------------   /   ------------

        Table: conversations => Stores information about private or group conversations between users.

        Columns:

            id (UUID): Unique identifier of the conversation.

            created_at (timestamp): Date and time when the conversation was created.

            updated_at (timestamp): Date and time of the last update to the conversation.

            avatar_url (text, nullable): URL of the conversation's representative avatar (mainly used for groups).

            title (text, nullable): Title of the conversation (commonly used for group chats).

            is_group (boolean): Indicates whether the conversation is a group (true) or a private one-on-one conversation (false).

            created_by (UUID, references users.profiles.id): ID of the profile that created the conversation.

    ------------   /   ------------

        Table: conversation_participants => Stores the list of participants for each conversation, along with their role and join time.

        Columns:

            conversation_id (UUID, references social.conversations.id): ID of the conversation. Combined with profile_id, it forms the primary key.

            profile_id (UUID, references users.profiles.id): ID of the user participating in the conversation. Combined with conversation_id, it forms the primary key.

            joined_at (timestamp): Timestamp indicating when the user joined the conversation.

            role (text, default 'member'): Role of the participant in the conversation (member or admin). Only users with the admin role can manage certain settings or participants.

    ------------   /   ------------

        Table: messages => Stores the individual messages sent within a conversation.

        Columns:

            id (UUID): Unique identifier for the message.

            created_at (timestamp): Timestamp of when the message was created.

            conversation_id (UUID, references social.conversations.id): ID of the conversation to which the message belongs.

            sender_profile_id (UUID, references users.profiles.id): ID of the user who sent the message.

            content (text): The actual content of the message.

            updated_at (timestamp): Timestamp of the last update to the message.

            deleted_at (timestamp, nullable): Timestamp indicating when the message was deleted (if applicable). A soft delete strategy is used.

            delivered_to (UUID array): List of profile IDs that have received the message.

            read_by (UUID array): List of profile IDs that have read the message.

        Triggers:

            trigger_message: Creates a notification when a message is sent.

            trigger_update_message_timestamp: Automatically updates `updated_at` when a message is edited.

            trigger_soft_delete_message: Implements a soft delete strategy by setting `deleted_at` instead of deleting the message.

    ------------   /   ------------

        Table: notifications => Stores notifications generated by user interactions (likes, messages, follow requests, etc.)

        Columns:

            id (UUID): Unique identifier for the notification.

            created_at (timestamp): Timestamp of when the notification was created.

            profile_id (UUID, references users.profiles.id): ID of the user who is the recipient of the notification.

            type (text): The type of notification (e.g., "like", "comment", "follow_request", "message").

            entity_id (UUID): ID of the related entity (e.g., post, comment, message, etc.) that triggered the notification.

            from_user_id (UUID, references users.profiles.id): ID of the user who triggered the notification.

            is_read (boolean): Indicates whether the notification has been read. Defaults to false.

            message (text): A human-readable message describing the notification (optional if you want to display custom texts).

    ------------   /   ------------

        Table: hashtags => Stores unique hashtags that can be linked to posts.

        Columns:

            id (UUID): Unique identifier of the hashtag. Defaults to gen_random_uuid().

            name (text): Hashtag text, expected to be lowercase and prefixed with # (e.g., #guitarist). Must be unique.

            created_at (timestamp): Timestamp when the hashtag was created. Defaults to now().

    ------------   /   ------------

    Table: post_hashtags => Join table associating hashtags with posts.

    Columns:

        post_id (UUID, references social.posts.id): ID of the post.

        hashtag_id (UUID, references social.hashtags.id): ID of the associated hashtag.

        created_at (timestamp): Timestamp when the association was created. Defaults to now().

     Triggers:

            update_content_search_hashtags: Triggers `refresh_post_content_search()` when a hashtag is added, updated, or removed, to keep `posts.content_search` up to date.