-- Sends a notification when a comment is made on a post
CREATE OR REPLACE FUNCTION public.notify_comment()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
    INSERT INTO social.notifications (
        id,
        created_at,
        profile_id,
        type,
        entity_id,
        from_user_id,
        is_read,
        message
    )
    VALUES (
        gen_random_uuid(),
        NOW(),
        (SELECT profile_id FROM social.posts WHERE id = NEW.post_id), -- Post owner
        'comment',
        NEW.post_id,
        NEW.profile_id,
        false,
        'Someone commented on your post!'
    );
    RETURN NEW;
END;
$function$;




-- Sends a notification when a follow request is created
CREATE OR REPLACE FUNCTION public.notify_follow_request()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
    INSERT INTO social.notifications (
        id,
        created_at,
        profile_id,
        type,
        entity_id,
        from_user_id,
        is_read,
        message
    )
    VALUES (
        gen_random_uuid(),
        NOW(),
        NEW.following_profile_id,
        'follow_request',
        NEW.id,
        NEW.follower_profile_id,
        false,
        'You have a new follow request!'
    );
    RETURN NEW;
END;
$function$;




-- Sends a notification when a post is liked
CREATE OR REPLACE FUNCTION public.notify_like()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
    INSERT INTO social.notifications (
        id,
        created_at,
        profile_id,
        type,
        entity_id,
        from_user_id,
        is_read,
        message
    )
    VALUES (
        gen_random_uuid(),
        NOW(),
        (SELECT profile_id FROM social.posts WHERE id = NEW.post_id),
        'like',
        NEW.post_id,
        NEW.profile_id,
        false,
        'Someone liked your post!'
    );
    RETURN NEW;
END;
$function$;




-- Sends a notification when a user joins a group
CREATE OR REPLACE FUNCTION public.notify_profile_group_join()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
  INSERT INTO social.notifications (
    id,
    created_at,
    profile_id,
    type,
    entity_id,
    from_user_id,
    is_read,
    message
  )
  VALUES (
    gen_random_uuid(),
    NOW(),
    NEW.profile_id,
    'group_join',
    NEW.profile_group_id,
    NEW.profile_id,
    FALSE,
    'You have joined the group.'
  );
  RETURN NEW;
END;
$function$;




-- Sends a notification when a user leaves a group
CREATE OR REPLACE FUNCTION public.notify_profile_group_leave()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
DECLARE
  acting_user_id UUID;
  acting_user_id_text TEXT;
BEGIN
  -- Get the user ID executing the action from the JWT claims as text
  acting_user_id_text := current_setting('request.jwt.claims', true)::json->>'sub';

  -- Cast acting_user_id_text to UUID for later use
  acting_user_id := acting_user_id_text::uuid;

  -- Compare UUID types directly without casting OLD.profile_id to text
  IF acting_user_id = OLD.profile_id THEN
    -- Case: user left voluntarily → notify other group members
    INSERT INTO social.notifications (
      id, created_at, profile_id, type, entity_id, from_user_id, is_read, message
    )
    SELECT
      gen_random_uuid(),
      NOW(),
      pgm.profile_id,         -- recipient
      'group_member_left',
      OLD.profile_group_id,
      OLD.profile_id,         -- the user who left
      FALSE,
      'A member has left your group.'
    FROM users.profile_group_members pgm
    WHERE pgm.profile_group_id = OLD.profile_group_id
      AND pgm.profile_id != OLD.profile_id; -- don't notify the user who left

  ELSE
    -- Case: user was removed by another → notify only the removed user
    INSERT INTO social.notifications (
      id, created_at, profile_id, type, entity_id, from_user_id, is_read, message
    )
    VALUES (
      gen_random_uuid(),
      NOW(),
      OLD.profile_id,          -- recipient
      'group_member_removed',
      OLD.profile_group_id,
      acting_user_id,          -- user who removed
      FALSE,
      'You have been removed from the group.'
    );
  END IF;

  RETURN OLD;
END;
$function$;






-- Prevents duplicate likes on the same post or comment by the same user
CREATE OR REPLACE FUNCTION public.prevent_duplicate_likes()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
    IF EXISTS (
        SELECT 1
        FROM social.likes
        WHERE profile_id = NEW.profile_id
        AND (post_id = NEW.post_id OR comment_id = NEW.comment_id)
    ) THEN
        RAISE EXCEPTION 'Duplicate like detected';
    END IF;
    RETURN NEW;
END;
$function$;




-- Prevents adding the same participant to a conversation more than once
CREATE OR REPLACE FUNCTION public.prevent_duplicate_participants()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
    IF EXISTS (
        SELECT 1
        FROM social.conversation_participants
        WHERE conversation_id = NEW.conversation_id
        AND profile_id = NEW.profile_id
    ) THEN
        RAISE EXCEPTION 'Duplicate participant detected';
    END IF;
    RETURN NEW;
END;
$function$;




-- Prevents duplicate usernames in the profiles table
CREATE OR REPLACE FUNCTION public.prevent_duplicate_usernames()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
    IF EXISTS (
        SELECT 1
        FROM users.profiles
        WHERE username = NEW.username
        AND id != NEW.id
    ) THEN
        RAISE EXCEPTION 'Duplicate username detected';
    END IF;
    RETURN NEW;
END;
$function$;




-- Reassigns a new admin when the last admin leaves a group
CREATE OR REPLACE FUNCTION public.reassign_admin_on_leave()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
DECLARE
  remaining_admins INT;
  new_admin UUID;
BEGIN
  SELECT COUNT(*) INTO remaining_admins
  FROM users.profile_group_members
  WHERE profile_group_id = OLD.profile_group_id AND role = 'admin' AND profile_id != OLD.profile_id;

  IF remaining_admins = 0 THEN
    SELECT profile_id INTO new_admin
    FROM users.profile_group_members
    WHERE profile_group_id = OLD.profile_group_id
    ORDER BY joined_at ASC
    LIMIT 1;

    IF new_admin IS NOT NULL THEN
      UPDATE users.profile_group_members
      SET role = 'admin'
      WHERE profile_group_id = OLD.profile_group_id AND profile_id = new_admin;
    END IF;
  END IF;

  RETURN OLD;
END;
$function$;




-- Soft deletes a message by setting the deleted_at timestamp
CREATE OR REPLACE FUNCTION public.soft_delete_message()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.deleted_at = NOW();
    RETURN NEW;
END;
$function$;




-- Updates the timestamp when a comment is updated
CREATE OR REPLACE FUNCTION public.update_comment_timestamp()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$function$;




-- Updates the timestamp when a connection is updated
CREATE OR REPLACE FUNCTION public.update_connection_timestamp()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$function$;




-- Updates the timestamp when a message is updated
CREATE OR REPLACE FUNCTION public.update_message_timestamp()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$function$;




-- Updates the timestamp when a post is updated
CREATE OR REPLACE FUNCTION public.update_post_timestamp()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$function$;




-- Automatically adds the creator of a group as an admin in the group members table
CREATE OR REPLACE FUNCTION add_creator_to_group_members()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
  INSERT INTO users.profile_group_members (profile_group_id, profile_id, role, joined_at)
  VALUES (NEW.id, NEW.created_by, 'admin', NOW());

  RETURN NEW;
END;
$$;





-- Updates the searchable content field for a profile based on basic fields
CREATE OR REPLACE FUNCTION users.update_profile_content_search()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
  NEW.content_search :=
    to_tsvector('spanish', coalesce(NEW.username, '')) ||
    to_tsvector('english', coalesce(NEW.username, '')) ||
    to_tsvector('spanish', coalesce(NEW.firstname, '')) ||
    to_tsvector('english', coalesce(NEW.firstname, '')) ||
    to_tsvector('spanish', coalesce(NEW.lastname, '')) ||
    to_tsvector('english', coalesce(NEW.lastname, '')) ||
    to_tsvector('spanish', coalesce(NEW.email, '')) ||
    to_tsvector('english', coalesce(NEW.email, '')) ||
    to_tsvector('spanish', coalesce(NEW.country, '')) ||
    to_tsvector('english', coalesce(NEW.country, '')) ||
    to_tsvector('spanish', coalesce(NEW.city, '')) ||
    to_tsvector('english', coalesce(NEW.city, '')) ||
    to_tsvector('spanish', coalesce(NEW.bio, '')) ||
    to_tsvector('english', coalesce(NEW.bio, ''));
  RETURN NEW;
END;
$$;



 
-- Automatically creates a user profile upon authentication if it does not already exist
CREATE OR REPLACE FUNCTION public.create_profile_when_authenticated()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  IF NEW.role = 'authenticated' THEN
    INSERT INTO users.profiles (id, email, username)
    VALUES (
      NEW.id,
      NEW.email,
      NEW.raw_user_meta_data->>'full_name'
    )
    ON CONFLICT (id) DO NOTHING;
  END IF;
  RETURN NEW;
END;
$$;





-- Updates the content_search field for a post when its hashtags, title or content change
CREATE OR REPLACE FUNCTION social.refresh_post_content_search()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
DECLARE
  target_post_id uuid;
  hashtag_text TEXT;
  post_title TEXT;
  post_content TEXT;
  new_search tsvector;
  current_search tsvector;
BEGIN
  IF TG_TABLE_NAME = 'post_hashtags' THEN
    IF TG_OP = 'DELETE' THEN
      target_post_id := OLD.post_id;
    ELSE
      target_post_id := NEW.post_id;
    END IF;
  ELSE
    target_post_id := NEW.id;
  END IF;

  SELECT string_agg(h.name, ' ') INTO hashtag_text
  FROM social.post_hashtags ph
  JOIN social.hashtags h ON h.id = ph.hashtag_id
  WHERE ph.post_id = target_post_id;

  IF hashtag_text IS NULL THEN
    hashtag_text := '';
  END IF;

  SELECT title, content, content_search INTO post_title, post_content, current_search
  FROM social.posts
  WHERE id = target_post_id;

  new_search :=
    to_tsvector('spanish', coalesce(post_title, '') || ' ' || coalesce(post_content, '') || ' ' || hashtag_text) ||
    to_tsvector('english', coalesce(post_title, '') || ' ' || coalesce(post_content, '') || ' ' || hashtag_text);

  IF current_search IS DISTINCT FROM new_search THEN
    UPDATE social.posts
    SET content_search = new_search
    WHERE id = target_post_id;
  END IF;

  RETURN NULL;
END;
$$;



-- Updates the content_search_roles field in profiles when roles related to a profile change
CREATE OR REPLACE FUNCTION users.update_content_search_roles_trigger()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  UPDATE users.profiles
  SET content_search_roles = (
    SELECT to_tsvector(
      string_agg(role, ' ')
    )
    FROM music.roles
    WHERE profile_id = NEW.profile_id
  )
  WHERE id = NEW.profile_id;

  RETURN NEW;
END;
$$;



-- Updates the content_search_details field in profiles when hashtags or related details change
CREATE OR REPLACE FUNCTION social.refresh_profile_content_search_details()
RETURNS TRIGGER AS $$
DECLARE
  target_profile_id uuid;
  hashtag_text TEXT;
  new_search tsvector;
  current_search tsvector;
BEGIN
  -- Determine the affected profile ID
  IF TG_TABLE_NAME = 'profile_hashtags' THEN
    IF TG_OP = 'DELETE' THEN
      target_profile_id := OLD.profile_id;
    ELSE
      target_profile_id := NEW.profile_id;
    END IF;
  ELSE
    target_profile_id := NEW.id;
  END IF;

  -- Retrieve associated hashtags
  SELECT string_agg(h.name, ' ') INTO hashtag_text
  FROM social.profile_hashtags ph
  JOIN social.hashtags h ON h.id = ph.hashtag_id
  WHERE ph.profile_id = target_profile_id;

  IF hashtag_text IS NULL THEN
    hashtag_text := '';
  END IF;

  -- Get the current value of content_search_details
  SELECT content_search_details INTO current_search
  FROM users.profiles
  WHERE id = target_profile_id;

  -- Generate new search vector (Spanish + English)
  new_search :=
    to_tsvector('spanish', hashtag_text) ||
    to_tsvector('english', hashtag_text);

  -- Update only if there were changes
  IF current_search IS DISTINCT FROM new_search THEN
    UPDATE users.profiles
    SET content_search_details = new_search
    WHERE id = target_profile_id;
  END IF;

  RETURN NULL;
END;
$$ LANGUAGE plpgsql;



-- Aggregates multiple search vectors into a single comprehensive content_search_all field in profiles
CREATE OR REPLACE FUNCTION users.update_content_search_all()
RETURNS TRIGGER AS $$
BEGIN
  NEW.content_search_all :=
    coalesce(NEW.content_search, '') ||
    coalesce(NEW.content_search_roles, '') ||
    coalesce(NEW.content_search_details, '');
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;



-- Assigns the conversation creator as admin when a conversation is converted into a group
create or replace function set_creator_as_admin()
returns trigger as $$
begin
  -- Only executes if is_group changed to TRUE
  if (NEW.is_group = true and OLD.is_group is distinct from NEW.is_group) then
    update social.conversation_participants
    set role = 'admin'
    where conversation_id = NEW.id
      and profile_id = NEW.created_by;
  end if;

  return NEW;
end;
$$ language plpgsql;



-- 
CREATE OR REPLACE FUNCTION delete_messages_on_conversation_delete()
RETURNS TRIGGER AS $$
BEGIN
  DELETE FROM social.messages WHERE conversation_id = OLD.id;
  RETURN OLD;
END;
$$ LANGUAGE plpgsql;