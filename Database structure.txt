users (schema)
│
├── profiles
│   ├─ id (UUID, auth.uid())
│   ├─ username, email, avatar_url, country, city, firstname, lastname, gender, birthdate, bio
│   ├─ content_search (tsvector) and related search vectors
│   └─ Triggers (unique username enforcement, update search vectors)
│
├── profile_groups
│   ├─ id (UUID)
│   ├─ name, bio, avatar_url, country, city, genre
│   ├─ created_by (UUID -> profiles.id)
│   ├─ created_at
│   └─ Trigger: add_creator_to_group_members (creator assigned as admin)
│
└── profile_group_members
    ├─ id (UUID)
    ├─ profile_group_id (UUID -> profile_groups.id)
    ├─ profile_id (UUID -> profiles.id)
    ├─ role (default 'member')
    ├─ joined_at
    └─ Triggers (reassign admin if needed, notifications on join/leave)

music (schema)
│
├── roles
│   ├─ id (UUID)
│   ├─ role (instrumentalist, singer, DJ, producer, composer)
│   ├─ profile_id (UUID -> profiles.id)
│   └─ Trigger: update content_search_roles on insert/update
│
├── instrument_details
│   ├─ id, profile_id, role_id
│   ├─ instrument, years_of_experience, level
│
├── singer_details
│   ├─ id, role_id, profile_id
│   ├─ voice_type, music_genre, level
│
├── dj_details
│   ├─ id, role_id, profile_id
│   ├─ preferred_genres, events_played, level
│
├── producer_details
│   ├─ id, role_id, profile_id
│   ├─ production_type, years_of_experience, level
│
└── composer_details
    ├─ id, role_id, profile_id
    ├─ composition_style, years_of_experience, level

social (schema)
│
├── post_hashtags
│   ├─ post_id (UUID -> posts.id)
│   ├─ hashtag_id (UUID -> hashtags.id)
│   ├─ created_at
│   └─ Trigger: update content_search on posts
│
├── profile_hashtags
│   ├─ profile_id (UUID -> profiles.id)
│   ├─ hashtag_id (UUID -> hashtags.id)
│   ├─ created_at
│   └─ Trigger: update content_search_details on profiles
│
├── hashtags
│   ├─ id (UUID)
│   ├─ name (text)
│
├── user_connections
│   ├─ id (UUID)
│   ├─ follower_profile_id, following_profile_id (UUID -> profiles.id)
│   ├─ status, updated_at
│   └─ Triggers (notifications on follow requests, update timestamp)
│
├── posts
│   ├─ id (UUID)
│   ├─ profile_id (UUID -> profiles.id)
│   ├─ title, content, images_urls
│   ├─ created_at, updated_at
│   ├─ content_search (tsvector)
│   └─ Triggers (likes, comments, update content_search)
│
├── comments
│   ├─ id (UUID)
│   ├─ post_id (UUID -> posts.id)
│   ├─ profile_id (UUID -> profiles.id)
│   ├─ content, updated_at
│   └─ Triggers (comment notifications, update timestamp)
│
├── likes
│   ├─ id (UUID)
│   ├─ profile_id (UUID -> profiles.id)
│   ├─ post_id (UUID, nullable)
│   ├─ comment_id (UUID, nullable)
│   └─ Triggers (prevent duplicate likes)
│
├── conversations
│   ├─ id (UUID)
│   ├─ created_at, updated_at
│   ├─ avatar_url, title, is_group
│   ├─ created_by (UUID -> profiles.id)
│
├── conversation_participants
│   ├─ conversation_id (UUID -> conversations.id)
│   ├─ profile_id (UUID -> profiles.id)
│   ├─ joined_at, role
│
├── messages
│   ├─ id (UUID)
│   ├─ created_at, updated_at, deleted_at
│   ├─ conversation_id (UUID -> conversations.id)
│   ├─ sender_profile_id (UUID -> profiles.id)
│   ├─ content, delivered_to (UUID[]), read_by (UUID[])
│   └─ Triggers (notifications on send, soft delete, update timestamp)
│
└── notifications
    ├─ id (UUID)
    ├─ created_at
    ├─ profile_id (UUID -> profiles.id)
    ├─ type, entity_id, from_user_id, is_read, message
